{"version":3,"sources":["Components/Card.tsx","hooks/useStateWithLocalStorage.ts","utils.ts","Components/Analytics.tsx","Components/Header.tsx","Components/Settings.tsx","Components/CardsList.tsx","Components/UnpaidDrawings.tsx","Components/InvoicedDrawings.tsx","Components/PaidDrawings.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","title","style","float","badge","isLoading","prefix","separator","end","value","altCurrencyRatio","suffix","children","useStateWithLocalStorage","localStorageKey","React","useState","localStorage","getItem","setValue","useEffect","setItem","getCards","listId","apiKey","apiToken","callback","fetch","then","r","json","data","getExchangeRate","rates","RUB","addLabelToCard","cardId","labelId","method","removeLabelFromCard","getPayPalAuthToken","clientId","secret","credentials","btoa","headers","Headers","append","body","URLSearchParams","redirect","getPayPalInvoiceTemplate","authToken","createDraftInvoice","template","cards","itemName","template_info","items","name","map","c","description","getShortCardDescription","unit_amount","currency_code","customFieldItems","number","quantity","requestOptions","JSON","stringify","getFirstGroup","string","regex","match","exec","trim","card","orderNumber","desc","orderType","getTotal","reduce","summ","Analytics","config","localStorageKeys","trelloApiKey","trelloApiToken","history","useHistory","push","urls","settings","isLoaded","setIsCardsLoaded","undefined","setAltCurrencyRatio","inQueueCards","setInQueueCards","inProgressCards","setInProgressCards","completedCards","setCompletedCards","inRevisionCards","setInRevisionCards","sentToClientCards","setSentToClientCards","inQueueCardsPromise","trelloLists","inQueueListId","filter","id","inProgressCardsPromise","inProgressListId","compleatedCardsPromise","completedListId","inRevisionCardsPromise","inRevisionListId","sentToClientCardsPromise","sentToClientListId","Promise","all","inQueueTotal","inProgressTotal","completedTotal","inRevisionTotal","sentToClientTotal","currentCards","labels","length","currentTotal","invoicedCards","some","l","labelsId","invoiced","invoicedTotal","paidCards","paid","paidTotal","leftToMinimumRedraw","Math","max","badgeText","to","unpaid","Header","home","Settings","setTrelloApiKey","setTrelloApiToken","payPalClientId","setPayPalClientId","payPalSecret","setPayPalSecret","maxWidth","onSubmit","e","preventDefault","htmlFor","type","aria-describedby","onChange","target","CardsList","scope","align","textAlign","i","href","shortUrl","toFixed","colSpan","UnpaidDrawings","setIsLoaded","unpaidCards","setUnpaidCards","invoidedCards","setInvoicedCards","unpaidPromise","invoicedPromise","handleCreateInvoiceClick","a","token","response","chunks","split","invoiceId","url","window","open","handleMakeCardsInvoicedClick","promises","invoiceButtonText","isInvoiceButtonDisabled","disabled","onClick","InvoicedDrawings","setCards","promisesForRemoving","promisesForAdding","PaidDrawings","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d83f7cd.chunk.js","sourcesContent":["import CountUp from 'react-countup';\r\n\r\nexport interface CardProps {\r\n  isLoading: boolean;\r\n  title: string;\r\n  value: number;\r\n  altCurrencyRatio?: number;\r\n  badge?: string;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = (props) => {\r\n  return (\r\n    <div className=\"card bg-light bg-gradient\">\r\n      <div className=\"card-body\">\r\n        <h6 className=\"card-subtitle mb-2\">{props.title} <span className=\"badge bg-primary\" style={{float: 'right'}}>{props.badge}</span></h6>\r\n        <h5 className=\"card-title text-success\">\r\n          {!props.isLoading \r\n            ? <>\r\n                <CountUp prefix=\"$\" separator=\",\" end={props.value} />\r\n                {props.altCurrencyRatio && <><span> / </span><CountUp suffix=\" ₽\" separator=\",\" end={props.value * props.altCurrencyRatio} /></>} \r\n              </>\r\n            : 'Loading...'}\r\n        </h5>\r\n        <p className=\"card-text\">{!props.isLoading ? props.children : 'Loading...'}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst useStateWithLocalStorage = (localStorageKey: string): [string, React.Dispatch<React.SetStateAction<string>>] => {\r\n  const [value, setValue] = React.useState(\r\n    localStorage.getItem(localStorageKey) || ''\r\n  );\r\n \r\n  React.useEffect(() => {\r\n    localStorage.setItem(localStorageKey, value);\r\n  }, [value]);\r\n \r\n  return [value, setValue];\r\n};\r\n\r\nexport default useStateWithLocalStorage;","import { TrelloCard } from './types';\r\n\r\nexport const getCards = (listId: string, apiKey: string, apiToken: string, callback: (data: TrelloCard[]) => void): Promise<any> => {\r\n  return fetch(`https://api.trello.com/1/lists/${listId}/cards?key=${apiKey}&token=${apiToken}&customFieldItems=true`)\r\n    .then(r => r.json())\r\n    .then(data => callback(data));\r\n}\r\nexport const getExchangeRate = (callback: (rate: number) => void): Promise<any> => {\r\n  return fetch('https://api.exchangeratesapi.io/latest?&base=USD&symbols=RUB')\r\n    .then(r => r.json())\r\n    .then(data => {\r\n      callback(data.rates.RUB);\r\n    });\r\n}\r\n\r\nexport const addLabelToCard = (cardId: string, labelId: string, apiKey: string, apiToken: string) => {\r\n  return fetch(`https://api.trello.com/1/cards/${cardId}/idLabels?key=${apiKey}&token=${apiToken}&value=${labelId}`, { method: 'POST' });\r\n}\r\n\r\nexport const removeLabelFromCard = (cardId: string, labelId: string, apiKey: string, apiToken: string) => {\r\n  return fetch(`https://api.trello.com/1/cards/${cardId}/idLabels/${labelId}?key=${apiKey}&token=${apiToken}`, { method: 'DELETE' });\r\n}\r\n\r\nexport const getPayPalAuthToken = (clientId: string, secret: string): Promise<string> => {\r\n  const credentials = btoa(`${clientId}:${secret}`);\r\n  \r\n  const headers = new Headers();\r\n  headers.append('Authorization', `Basic ${credentials}`);\r\n  headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n  const body = new URLSearchParams();\r\n  body.append('grant_type', 'client_credentials');\r\n\r\n  const requestOptions: RequestInit = { method: 'POST', headers, body, redirect: 'follow' };\r\n\r\n  return fetch('https://api-m.paypal.com/v1/oauth2/token', requestOptions)\r\n    .then(r => r.json())\r\n    .then(data => data['access_token'] as string);\r\n}\r\n\r\nexport const getPayPalInvoiceTemplate = (authToken: string): Promise<{}> => {\r\n  const headers = new Headers();\r\n  headers.append('Authorization', `Bearer ${authToken}`);\r\n  headers.append('Content-Type', 'application/json');\r\n\r\n  const requestOptions: RequestInit = { method: 'GET', headers, redirect: 'follow' };\r\n\r\n  return fetch('https://api.paypal.com/v2/invoicing/templates/TEMP-0XJ98350B9132814N', requestOptions)\r\n    .then(r => r.json())\r\n}\r\n\r\nexport const createDraftInvoice = (authToken: string, template: any, cards: TrelloCard[]): Promise<{}> => {\r\n  const headers = new Headers();\r\n  headers.append('Authorization', `Bearer ${authToken}`);\r\n  headers.append('Content-Type', 'application/json');\r\n\r\n  const itemName = template.template_info.items[0].name;\r\n\r\n  const data = template.template_info;\r\n  data.items = cards.map(c => ({\r\n    name: itemName,\r\n    description: getShortCardDescription(c),\r\n    unit_amount: { currency_code: 'USD', value: c.customFieldItems[0].value.number },\r\n    quantity: 1,\r\n  }));\r\n\r\n  const requestOptions: RequestInit = { method: 'POST', headers, body: JSON.stringify(data), redirect: 'follow' };\r\n\r\n  return fetch('https://api.paypal.com/v2/invoicing/invoices', requestOptions)\r\n    .then(r => r.json())\r\n}\r\n\r\nconst getFirstGroup = (string: string, regex: RegExp): string => {\r\n  const match = regex.exec(string);\r\n  return match && match[1] ? match[1].trim() : '';\r\n}\r\n\r\nexport const getShortCardDescription = (card: TrelloCard): string => {\r\n  const orderNumber = getFirstGroup(card.desc, /Order Number:(.+)$/gm);\r\n  const orderType = getFirstGroup(card.desc, /Order Type:(.+)$/gm);\r\n\r\n  return `Order Number: ${orderNumber} (${orderType || card.name})`;\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Card from \"./Card\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\nimport { getCards, getExchangeRate } from \"../utils\";\r\n\r\nconst getTotal = (cards: TrelloCard[]): number => {\r\n  return cards.reduce((summ, c) => summ += +c.customFieldItems[0].value.number, 0);\r\n}\r\n\r\nconst Analytics = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsCardsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [inQueueCards, setInQueueCards] = useState<TrelloCard[]>([]);\r\n  const [inProgressCards, setInProgressCards] = useState<TrelloCard[]>([]);\r\n  const [completedCards, setCompletedCards] = useState<TrelloCard[]>([]);\r\n  const [inRevisionCards, setInRevisionCards] = useState<TrelloCard[]>([]);\r\n  const [sentToClientCards, setSentToClientCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(data => setAltCurrencyRatio(data))\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    const inQueueCardsPromise = getCards(config.trelloLists.inQueueListId, apiKey, apiToken, (data) => setInQueueCards(data.filter(c => c.id !== '5f4cdb937afb6a829d4ad8f2')));\r\n    const inProgressCardsPromise = getCards(config.trelloLists.inProgressListId, apiKey, apiToken, (data) => setInProgressCards(data));\r\n    const compleatedCardsPromise = getCards(config.trelloLists.completedListId, apiKey, apiToken, (data) => setCompletedCards(data));\r\n    const inRevisionCardsPromise = getCards(config.trelloLists.inRevisionListId, apiKey, apiToken, (data) => setInRevisionCards(data));\r\n    const sentToClientCardsPromise = getCards(config.trelloLists.sentToClientListId, apiKey, apiToken, (data) => setSentToClientCards(data));\r\n\r\n    Promise.all([inQueueCardsPromise, inProgressCardsPromise, compleatedCardsPromise, inRevisionCardsPromise, sentToClientCardsPromise])\r\n      .then(() => setIsCardsLoaded(true));\r\n\r\n  }, [apiKey, apiToken]);\r\n\r\n\r\n  const inQueueTotal = getTotal(inQueueCards);\r\n  const inProgressTotal = getTotal(inProgressCards);\r\n  const completedTotal = getTotal(completedCards);\r\n  const inRevisionTotal = getTotal(inRevisionCards);\r\n  const sentToClientTotal = getTotal(sentToClientCards);\r\n\r\n  const currentCards = sentToClientCards.filter(c => !c.labels || !c.labels.length);\r\n  const currentTotal = getTotal(currentCards);\r\n\r\n  const invoicedCards = sentToClientCards.filter(c => c.labels && c.labels.some(l => l.id === config.labelsId.invoiced));\r\n  const invoicedTotal = getTotal(invoicedCards);\r\n\r\n  const paidCards = sentToClientCards.filter(c => c.labels && c.labels.some(l => l.id === config.labelsId.paid));\r\n  const paidTotal = getTotal(paidCards);\r\n\r\n  const leftToMinimumRedraw = Math.max(100 - currentTotal, 0);\r\n\r\n  const badgeText = isLoaded \r\n    ? leftToMinimumRedraw === 0 ? 'Ready' : `Earn more $${leftToMinimumRedraw}`\r\n    : '';\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Unpaid\" value={currentTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio} badge={badgeText}>\r\n            <Link to={config.urls.unpaid} className=\"card-link link-dark\">{currentCards.length} drawing(s)</Link>\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Invoiced\" value={invoicedTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            <Link to={config.urls.invoiced} className=\"card-link link-dark\">{invoicedCards.length} drawing(s)</Link>\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Paid\" value={paidTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            <Link to={config.urls.paid} className=\"card-link link-dark\">{paidCards.length} drawing(s)</Link>\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Total\" value={sentToClientTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {sentToClientCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col-lg\">\r\n          <Card title=\"In Queue\" value={inQueueTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {inQueueCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"In Progress\" value={inProgressTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {inProgressCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Completed\" value={completedTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {completedCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"In Revision\" value={inRevisionTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {inRevisionCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Analytics;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport config from '../config.json';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-body border-bottom shadow-sm\">\r\n      <p className=\"h5 my-0 me-md-auto fw-normal\">Work Progress</p>\r\n      <nav className=\"my-2 my-md-0 me-md-3\">\r\n        <Link className=\"p-2 text-dark\" to={config.urls.home}>Analytics</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.unpaid}>Unpaid</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.invoiced}>Invoiced</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.paid}>Paid</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.settings}>Settings</Link>\r\n      </nav>\r\n    </header>\r\n  )\r\n};\r\n\r\nexport default Header","import config from '../config.json';\r\nimport useStateWithLocalStorage from '../hooks/useStateWithLocalStorage';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Settings = () => {\r\n  const [trelloApiKey, setTrelloApiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const handleTrelloApiKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTrelloApiKey(e.target.value);\r\n  }\r\n  \r\n  const [trelloApiToken, setTrelloApiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n  const handleTrelloApiTokenChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTrelloApiToken(e.target.value);\r\n  }\r\n\r\n  const [payPalClientId, setPayPalClientId] = useStateWithLocalStorage(config.localStorageKeys.payPalClientId);\r\n  const handlePayPalClientIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPayPalClientId(e.target.value);\r\n  }\r\n  \r\n  const [payPalSecret, setPayPalSecret] = useStateWithLocalStorage(config.localStorageKeys.payPalSecret);\r\n  const handlePayPalSecretChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPayPalSecret(e.target.value);\r\n  }\r\n\r\n  const history = useHistory();\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    history.push(config.urls.home);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Settings</h1>\r\n      <div className=\"row\" style={{maxWidth: 600}}>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"trelloApiKey\" className=\"form-label\">Trello API Key</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"trelloApiKey\" aria-describedby=\"emailHelp\" value={trelloApiKey} onChange={handleTrelloApiKeyChange}/>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"trelloApiToken\" className=\"form-label\">Trello API Token</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"trelloApiToken\" value={trelloApiToken} onChange={handleTrelloApiTokenChange}/>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"payPalClientId\" className=\"form-label\">PayPal Client Id</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"payPalClientId\" aria-describedby=\"emailHelp\" value={payPalClientId} onChange={handlePayPalClientIdChange}/>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"payPalSecret\" className=\"form-label\">PayPal Secret</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"payPalSecret\" value={payPalSecret} onChange={handlePayPalSecretChange}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;","import { TrelloCard } from \"../types\";\r\nimport { getShortCardDescription } from \"../utils\";\r\n\r\nexport interface CardsListProps {\r\n  cards: TrelloCard[];\r\n  altCurrencyRatio?: number;\r\n}\r\n\r\nconst getTotal = (cards: TrelloCard[]): number => {\r\n  return cards.reduce((summ, c) => summ += +c.customFieldItems[0].value.number, 0);\r\n}\r\n\r\n\r\nconst CardsList: React.FC<CardsListProps> = (props) => {\r\n  const currentTotal = getTotal(props.cards);\r\n\r\n  return (\r\n    <table className=\"table table-hover table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">Description</th>\r\n          <th scope=\"col\" align=\"right\" style={{ textAlign: 'right' }}>Cost (USD)</th>\r\n          <th scope=\"col\" align=\"right\" style={{ textAlign: 'right' }}>Cost (RUB)</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.cards.map((c, i) =>\r\n          <tr key={c.id}>\r\n            <th scope=\"row\">{i + 1}</th>\r\n            <td><a className=\"link-dark\" href={c.shortUrl}>{getShortCardDescription(c)}</a></td>\r\n            <td align=\"right\">{c.customFieldItems[0].value.number}</td>\r\n            <td align=\"right\">{props.altCurrencyRatio ? `${(c.customFieldItems[0].value.number * props.altCurrencyRatio).toFixed(0)}` : 'N/A'}</td>\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <th colSpan={2} scope=\"row\">Total</th>\r\n          <td  align=\"right\"><b>${currentTotal}</b></td>\r\n          <td align=\"right\"><b>{props.altCurrencyRatio ? `${(currentTotal * props.altCurrencyRatio).toFixed(0)}₽` : 'N/A'}</b></td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  )\r\n};\r\n\r\nexport default CardsList;","import React, { useEffect, useState } from \"react\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\nimport CardsList from \"./CardsList\";\r\nimport { addLabelToCard, createDraftInvoice, getCards, getExchangeRate, getPayPalAuthToken, getPayPalInvoiceTemplate } from \"../utils\";\r\nimport { computeHeadingLevel } from \"@testing-library/react\";\r\n\r\nconst UnpaidDrawings = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n  const [payPalClientId] = useStateWithLocalStorage(config.localStorageKeys.payPalClientId);\r\n  const [payPalSecret] = useStateWithLocalStorage(config.localStorageKeys.payPalSecret);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [unpaidCards, setUnpaidCards] = useState<TrelloCard[]>([]);\r\n  const [invoidedCards, setInvoicedCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(data => setAltCurrencyRatio(data))\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    const unpaidPromise = getCards(config.trelloLists.sentToClientListId, apiKey, apiToken, (data) => setUnpaidCards(data.filter(c => !c.labels || !c.labels.length)));\r\n    const invoicedPromise = getCards(config.trelloLists.sentToClientListId, apiKey, apiToken, (data) => setInvoicedCards(data.filter(c => c.labels && c.labels.some(l => l.id === config.labelsId.invoiced))));\r\n\r\n    Promise.all([unpaidPromise, invoicedPromise]).then(() => setIsLoaded(true));\r\n  }, [apiKey, apiToken]);\r\n\r\n  const handleCreateInvoiceClick = async () => {\r\n    const token = await getPayPalAuthToken(payPalClientId, payPalSecret);\r\n    const template = await getPayPalInvoiceTemplate(token);\r\n    const response: any = await createDraftInvoice(token, template, unpaidCards);\r\n    \r\n    const chunks = response.href.split('/') as string[];\r\n    const invoiceId = chunks[chunks.length - 1];\r\n    const url = `https://www.paypal.com/invoice/details/${invoiceId}`;\r\n    window.open(url);\r\n  }\r\n\r\n  const handleMakeCardsInvoicedClick = async () => {\r\n    const promises = unpaidCards.map(c => addLabelToCard(c.id, config.labelsId.invoiced, apiKey, apiToken));\r\n    Promise.all(promises).then(() => history.push(config.urls.invoiced));\r\n  }\r\n\r\n  if (!isLoaded) {\r\n    return null;\r\n  }\r\n\r\n  const invoiceButtonText = !payPalClientId || !payPalSecret\r\n    ? 'Provide PayPal settings'\r\n    : invoidedCards.length ? 'Finish Previous Invoice' : 'Make Invoiced';\r\n\r\n  const isInvoiceButtonDisabled = !payPalClientId || !payPalSecret || !!invoidedCards.length;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col\">\r\n          <h3>Unpaid Orders</h3>\r\n          <CardsList cards={unpaidCards} altCurrencyRatio={altCurrencyRatio} />\r\n        </div>\r\n      </div>\r\n      <div className=\"row gy-3 \">\r\n        <div className=\"col\">\r\n          <button type=\"button\" className=\"btn btn-outline-primary\" disabled={!!invoidedCards.length} onClick={handleCreateInvoiceClick}>\r\n            {invoidedCards.length ? 'Finish Previous Invoice' : 'Create Draft Invoice'}\r\n          </button>\r\n        </div>\r\n        <div className=\"col text-end\">\r\n          <button type=\"button\" className=\"btn btn-outline-primary\" disabled={isInvoiceButtonDisabled} onClick={handleMakeCardsInvoicedClick}>\r\n            {invoiceButtonText}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default UnpaidDrawings;","import React, { useEffect, useState } from \"react\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\nimport CardsList from \"./CardsList\";\r\nimport { addLabelToCard, getCards, getExchangeRate, removeLabelFromCard } from \"../utils\";\r\n\r\nconst InvoicedDrawings = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [cards, setCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(data => setAltCurrencyRatio(data))\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    getCards(config.trelloLists.sentToClientListId, apiKey, apiToken, (data) => setCards(data.filter(c => c.labels && c.labels.some(l => l.id === config.labelsId.invoiced))))\r\n      .then(() => setIsLoaded(true));\r\n\r\n  }, [apiKey, apiToken]);\r\n\r\n  const handleMakeUnpaidClick = () => {\r\n    const promises = cards.map(c => removeLabelFromCard(c.id, config.labelsId.invoiced, apiKey, apiToken));\r\n    Promise.all(promises).then(() => history.push(config.urls.unpaid));\r\n  }\r\n\r\n  const handleMakePaidClick = () => {\r\n    const promisesForRemoving = cards.map(c => removeLabelFromCard(c.id, config.labelsId.invoiced, apiKey, apiToken));\r\n    const promisesForAdding = cards.map(c => addLabelToCard(c.id, config.labelsId.paid, apiKey, apiToken));\r\n    Promise.all([...promisesForAdding, ...promisesForRemoving]).then(() => history.push(config.urls.paid));\r\n  }\r\n\r\n  if (!isLoaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col\">\r\n          <h3>Invoiced Orders</h3>\r\n          <CardsList cards={cards} altCurrencyRatio={altCurrencyRatio} />\r\n        </div>\r\n      </div>\r\n      <div className=\"row gy-3 \">\r\n        <div className=\"col\">\r\n          <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={handleMakeUnpaidClick}>Make Unpaid</button>\r\n        </div>\r\n        <div className=\"col text-end\">\r\n          <button type=\"button\" className=\"btn btn-outline-primary\" onClick={handleMakePaidClick}>Make Paid</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default InvoicedDrawings;","import React, { useEffect, useState } from \"react\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\nimport CardsList from \"./CardsList\";\r\nimport { getCards, getExchangeRate } from \"../utils\";\r\n\r\nconst PaidDrawings = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [cards, setCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(data => setAltCurrencyRatio(data))\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    getCards(config.trelloLists.sentToClientListId, apiKey, apiToken, (data) => setCards(data.filter(c => c.labels && c.labels.some(l => l.id === config.labelsId.paid))))\r\n      .then(() => setIsLoaded(true));\r\n\r\n  }, [apiKey, apiToken]);\r\n  \r\n  if (!isLoaded) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col\">\r\n          <h3>Paid Orders</h3>\r\n            <CardsList cards={cards} altCurrencyRatio={altCurrencyRatio} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PaidDrawings;","import './App.css';\r\nimport Analytics from './Analytics';\r\nimport Header from './Header';\r\nimport React from 'react';\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Settings from './Settings';\r\nimport config from '../config.json';\r\nimport UnpaidDrawings from './UnpaidDrawings';\r\nimport InvoicedDrawings from './InvoicedDrawings';\r\nimport PaidDrawings from './PaidDrawings';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path={config.urls.settings} component={Settings} />\r\n        <Route exact path={config.urls.unpaid} component={UnpaidDrawings} />\r\n        <Route exact path={config.urls.invoiced} component={InvoicedDrawings} />\r\n        <Route exact path={config.urls.paid} component={PaidDrawings} />\r\n        <Route exact path={config.urls.home} component={Analytics} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}