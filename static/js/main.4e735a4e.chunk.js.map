{"version":3,"sources":["Components/Card.tsx","hooks/useStateWithLocalStorage.ts","Components/Analytics.tsx","Components/Header.tsx","Components/Settings.tsx","Components/Bills.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","title","style","float","badge","isLoading","prefix","separator","end","value","altCurrencyRatio","suffix","children","useStateWithLocalStorage","localStorageKey","React","useState","localStorage","getItem","setValue","useEffect","setItem","inQueueListId","inProgressListId","inRevisionListId","completedListId","sentToClientListId","getCards","listId","apiKey","apiToken","callback","fetch","then","r","json","data","getTotal","cards","reduce","summ","c","customFieldItems","number","Analytics","config","localStorageKeys","trelloApiKey","trelloApiToken","history","useHistory","push","urls","settings","isLoaded","setIsCardsLoaded","undefined","setAltCurrencyRatio","inQueueCards","setInQueueCards","inProgressCards","setInProgressCards","completedCards","setCompletedCards","inRevisionCards","setInRevisionCards","sentToClientCards","setSentToClientCards","rates","RUB","inQueueCardsPromise","filter","id","inProgressCardsPromise","compleatedCardsPromise","inRevisionCardsPromise","sentToClientCardsPromise","Promise","all","inQueueTotal","inProgressTotal","completedTotal","inRevisionTotal","sentToClientTotal","currentCards","labels","length","currentTotal","withdrawnCards","withdrawnTotal","leftToMinimumRedraw","Math","max","to","bills","Header","home","Settings","setApiKey","setApiToken","maxWidth","onSubmit","e","preventDefault","htmlFor","type","aria-describedby","onChange","target","getFirstGroup","string","regex","match","exec","trim","getShortDescription","card","orderNumber","desc","orderType","Bills","setCards","console","log","unpaidCards","scope","align","textAlign","map","i","toFixed","colSpan","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e735a4e.chunk.js","sourcesContent":["import CountUp from 'react-countup';\r\n\r\nexport interface CardProps {\r\n  isLoading: boolean;\r\n  title: string;\r\n  value: number;\r\n  altCurrencyRatio?: number;\r\n  badge?: string;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = (props) => {\r\n  return (\r\n    <div className=\"card bg-light bg-gradient\">\r\n      <div className=\"card-body\">\r\n        <h6 className=\"card-subtitle mb-2\">{props.title} <span className=\"badge bg-primary\" style={{float: 'right'}}>{props.badge}</span></h6>\r\n        <h5 className=\"card-title text-success\">\r\n          {!props.isLoading \r\n            ? <>\r\n                <CountUp prefix=\"$\" separator=\",\" end={props.value} />\r\n                {props.altCurrencyRatio && <><span> / </span><CountUp suffix=\" â‚½\" separator=\",\" end={props.value * props.altCurrencyRatio} /></>} \r\n              </>\r\n            : 'Loading...'}\r\n        </h5>\r\n        <p className=\"card-text\">{!props.isLoading ? props.children : 'Loading...'}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst useStateWithLocalStorage = (localStorageKey: string): [string, React.Dispatch<React.SetStateAction<string>>] => {\r\n  const [value, setValue] = React.useState(\r\n    localStorage.getItem(localStorageKey) || ''\r\n  );\r\n \r\n  React.useEffect(() => {\r\n    localStorage.setItem(localStorageKey, value);\r\n  }, [value]);\r\n \r\n  return [value, setValue];\r\n};\r\n\r\nexport default useStateWithLocalStorage;","import React, { useEffect, useState } from \"react\";\r\nimport Card from \"./Card\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\n\r\nconst inQueueListId = '5f4cdb937afb6a829d4ad8e6';\r\nconst inProgressListId = '5f4cdb937afb6a829d4ad8e7';\r\nconst inRevisionListId = '5f4cdb937afb6a829d4ad8ea';\r\nconst completedListId = '5f4cdb937afb6a829d4ad8e8';\r\nconst sentToClientListId = '5f4cdb937afb6a829d4ad8e9';\r\n\r\nconst getCards = (listId: string, apiKey: string, apiToken: string, callback: (data: TrelloCard[]) => void): Promise<any> => {\r\n  return fetch(`https://api.trello.com/1/lists/${listId}/cards?key=${apiKey}&token=${apiToken}&customFieldItems=true`)\r\n    .then(r => r.json())\r\n    .then(data => callback(data));\r\n}\r\n\r\nconst getTotal = (cards: TrelloCard[]): number => {\r\n  return cards.reduce((summ, c) => summ += +c.customFieldItems[0].value.number, 0);\r\n}\r\n\r\nconst Analytics = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsCardsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [inQueueCards, setInQueueCards] = useState<TrelloCard[]>([]);\r\n  const [inProgressCards, setInProgressCards] = useState<TrelloCard[]>([]);\r\n  const [completedCards, setCompletedCards] = useState<TrelloCard[]>([]);\r\n  const [inRevisionCards, setInRevisionCards] = useState<TrelloCard[]>([]);\r\n  const [sentToClientCards, setSentToClientCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.exchangeratesapi.io/latest?&base=USD&symbols=RUB')\r\n      .then(r => r.json())\r\n      .then(data => {\r\n        setAltCurrencyRatio(data.rates.RUB);\r\n      });\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!sentToClientListId || !apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    const inQueueCardsPromise = getCards(inQueueListId, apiKey, apiToken, (data) => setInQueueCards(data.filter(c => c.id !== '5f4cdb937afb6a829d4ad8f2')));\r\n    const inProgressCardsPromise = getCards(inProgressListId, apiKey, apiToken, (data) => setInProgressCards(data));\r\n    const compleatedCardsPromise = getCards(completedListId, apiKey, apiToken, (data) => setCompletedCards(data));\r\n    const inRevisionCardsPromise = getCards(inRevisionListId, apiKey, apiToken, (data) => setInRevisionCards(data));\r\n    const sentToClientCardsPromise = getCards(sentToClientListId, apiKey, apiToken, (data) => setSentToClientCards(data));\r\n\r\n    Promise.all([inQueueCardsPromise, inProgressCardsPromise, compleatedCardsPromise, inRevisionCardsPromise, sentToClientCardsPromise])\r\n      .then(() => setIsCardsLoaded(true));\r\n\r\n  }, [inQueueListId, inProgressListId, completedListId, inRevisionListId, sentToClientListId, apiKey, apiToken]);\r\n\r\n\r\n  const inQueueTotal = getTotal(inQueueCards);\r\n  const inProgressTotal = getTotal(inProgressCards);\r\n  const completedTotal = getTotal(completedCards);\r\n  const inRevisionTotal = getTotal(inRevisionCards);\r\n  const sentToClientTotal = getTotal(sentToClientCards);\r\n\r\n  const currentCards = sentToClientCards.filter(c => !c.labels || !c.labels.length);\r\n  const currentTotal = getTotal(currentCards);\r\n\r\n  const withdrawnCards = sentToClientCards.filter(c => c.labels && c.labels.length);\r\n  const withdrawnTotal = getTotal(withdrawnCards);\r\n\r\n  const leftToMinimumRedraw = Math.max(100 - currentTotal, 0);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col-lg\">\r\n          <Card title=\"In Queue\" value={inQueueTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {inQueueCards.length} drawings\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"In Progress\" value={inProgressTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {inProgressCards.length} drawings\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Completed\" value={completedTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {completedCards.length} drawings\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"In Revision\" value={inRevisionTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {inRevisionCards.length} drawings\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Unpaid\" value={currentTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio} badge={leftToMinimumRedraw === 0 ? 'Ready' : ''}>\r\n            <Link to={config.urls.bills} className=\"card-link\">{currentCards.length} drawings</Link>\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Left to Withdraw\" value={leftToMinimumRedraw} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {leftToMinimumRedraw === 0 ? <span className=\"text-success\">Ready to Withdraw</span> : 'Required to Withdraw'}\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Paid\" value={withdrawnTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {withdrawnCards.length} drawings\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Total\" value={sentToClientTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {sentToClientCards.length} drawings\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Analytics;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport config from '../config.json';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-body border-bottom shadow-sm\">\r\n      <p className=\"h5 my-0 me-md-auto fw-normal\">Work Progress</p>\r\n      <nav className=\"my-2 my-md-0 me-md-3\">\r\n        <Link className=\"p-2 text-dark\" to={config.urls.home}>Analytics</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.bills}>Bills</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.settings}>Settings</Link>\r\n      </nav>\r\n    </header>\r\n  )\r\n};\r\n\r\nexport default Header","import config from '../config.json';\r\nimport useStateWithLocalStorage from '../hooks/useStateWithLocalStorage';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Settings = () => {\r\n  const [apiKey, setApiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const handleApiKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setApiKey(e.target.value);\r\n  }\r\n  \r\n  const [apiToken, setApiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n  const handleApiTokenChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setApiToken(e.target.value);\r\n  }\r\n\r\n  const history = useHistory();\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    history.push(config.urls.home);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Settings</h1>\r\n      <div className=\"row\" style={{maxWidth: 600}}>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"trelloApiKey\" className=\"form-label\">Trello API Key</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"trelloApiKey\" aria-describedby=\"emailHelp\" value={apiKey} onChange={handleApiKeyChange}/>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"trelloApiToken\" className=\"form-label\">Trello API Token</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"trelloApiToken\" value={apiToken} onChange={handleApiTokenChange}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;","import React, { useEffect, useState } from \"react\";\r\nimport Card from \"./Card\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\n\r\nconst inQueueListId = '5f4cdb937afb6a829d4ad8e6';\r\nconst inProgressListId = '5f4cdb937afb6a829d4ad8e7';\r\nconst inRevisionListId = '5f4cdb937afb6a829d4ad8ea';\r\nconst completedListId = '5f4cdb937afb6a829d4ad8e8';\r\nconst sentToClientListId = '5f4cdb937afb6a829d4ad8e9';\r\n\r\nconst getTotal = (cards: TrelloCard[]): number => {\r\n  return cards.reduce((summ, c) => summ += +c.customFieldItems[0].value.number, 0);\r\n}\r\n\r\nconst getFirstGroup = (string: string, regex: RegExp): string => {\r\n  const match = regex.exec(string);\r\n  return match && match[1] ? match[1].trim() : '';\r\n}\r\n\r\nconst getShortDescription = (card: TrelloCard): string => {\r\n  const orderNumber = getFirstGroup(card.desc, /Order Number:(.+)$/gm);\r\n  const orderType = getFirstGroup(card.desc, /Order Type:(.+)$/gm);\r\n\r\n  return `${orderNumber} (${orderType})`;\r\n}\r\n\r\nconst Bills = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsCardsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [cards, setCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.exchangeratesapi.io/latest?&base=USD&symbols=RUB')\r\n      .then(r => r.json())\r\n      .then(data => {\r\n        setAltCurrencyRatio(data.rates.RUB);\r\n      });\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!sentToClientListId || !apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    fetch(`https://api.trello.com/1/lists/${sentToClientListId}/cards?key=${apiKey}&token=${apiToken}&customFieldItems=true`)\r\n      .then(r => r.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        setCards(data);\r\n        setIsCardsLoaded(true);\r\n      });\r\n  }, [sentToClientListId, apiKey, apiToken]);\r\n\r\n\r\n  const unpaidCards = cards.filter(c => !c.labels || !c.labels.length);\r\n  const currentTotal = getTotal(unpaidCards);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <h3>Unpaid Orders</h3>\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">#</th>\r\n              <th scope=\"col\">Description</th>\r\n              <th scope=\"col\" align=\"right\" style={{textAlign: 'right'}}>Coast (USD)</th>\r\n              <th scope=\"col\" align=\"right\" style={{textAlign: 'right'}}>Coast (RUB)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {unpaidCards.map((c, i) =>\r\n              <tr key={c.id}>\r\n                <th scope=\"row\">{i + 1}</th>\r\n                <td>{getShortDescription(c)}</td>\r\n                <td align=\"right\">{c.customFieldItems[0].value.number}</td>\r\n                <td align=\"right\">{altCurrencyRatio ? `${(c.customFieldItems[0].value.number * altCurrencyRatio).toFixed(2)}` : 'N/A'} </td>\r\n              </tr>\r\n            )}\r\n            <tr className=\"table-success\">\r\n              <th scope=\"row\">Total</th>\r\n              <td colSpan={2} align=\"right\"><b>{currentTotal}</b></td>\r\n              <td align=\"right\"><b>{altCurrencyRatio ? `${(currentTotal * altCurrencyRatio).toFixed(2)}` : 'N/A'}</b></td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Bills;","import './App.css';\nimport Analytics from './Analytics';\nimport Header from './Header';\nimport React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Settings from './Settings';\nimport config from '../config.json';\nimport Bills from './Bills';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path={config.urls.settings} component={Settings} />\n        <Route exact path={config.urls.bills} component={Bills} />\n        <Route exact path={config.urls.home} component={Analytics} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}