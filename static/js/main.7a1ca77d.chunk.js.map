{"version":3,"sources":["Components/Card.tsx","hooks/useStateWithLocalStorage.ts","utils.ts","Components/Analytics.tsx","Components/Header.tsx","Components/Settings.tsx","Components/CardsList.tsx","Components/UnpaidDrawings.tsx","Components/InvoicedDrawings.tsx","Components/PaidDrawings.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","title","style","float","badge","isLoading","prefix","separator","end","value","altCurrencyRatio","suffix","children","useStateWithLocalStorage","localStorageKey","React","useState","localStorage","getItem","setValue","useEffect","setItem","getCards","listId","apiKey","apiToken","callback","fetch","then","r","json","data","getExchangeRate","rates","RUB","getTotal","cards","reduce","summ","c","customFieldItems","number","Analytics","config","localStorageKeys","trelloApiKey","trelloApiToken","history","useHistory","push","urls","settings","isLoaded","setIsCardsLoaded","undefined","setAltCurrencyRatio","inQueueCards","setInQueueCards","inProgressCards","setInProgressCards","completedCards","setCompletedCards","inRevisionCards","setInRevisionCards","sentToClientCards","setSentToClientCards","inQueueCardsPromise","trelloLists","inQueueListId","filter","id","inProgressCardsPromise","inProgressListId","compleatedCardsPromise","completedListId","inRevisionCardsPromise","inRevisionListId","sentToClientCardsPromise","sentToClientListId","Promise","all","inQueueTotal","inProgressTotal","completedTotal","inRevisionTotal","sentToClientTotal","currentCards","labels","length","currentTotal","invoicedCards","some","l","name","invoiced","invoicedTotal","paidCards","paid","paidTotal","leftToMinimumRedraw","Math","max","to","unpaid","Header","home","Settings","setApiKey","setApiToken","maxWidth","onSubmit","e","preventDefault","htmlFor","type","aria-describedby","onChange","target","getFirstGroup","string","regex","match","exec","trim","getShortDescription","card","orderNumber","desc","orderType","CardsList","scope","align","textAlign","map","i","toFixed","href","shortUrl","colSpan","UnpaidDrawings","setIsLoaded","setCards","InvoicedDrawings","PaidDrawings","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a1ca77d.chunk.js","sourcesContent":["import CountUp from 'react-countup';\r\n\r\nexport interface CardProps {\r\n  isLoading: boolean;\r\n  title: string;\r\n  value: number;\r\n  altCurrencyRatio?: number;\r\n  badge?: string;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = (props) => {\r\n  return (\r\n    <div className=\"card bg-light bg-gradient\">\r\n      <div className=\"card-body\">\r\n        <h6 className=\"card-subtitle mb-2\">{props.title} <span className=\"badge bg-primary\" style={{float: 'right'}}>{props.badge}</span></h6>\r\n        <h5 className=\"card-title text-success\">\r\n          {!props.isLoading \r\n            ? <>\r\n                <CountUp prefix=\"$\" separator=\",\" end={props.value} />\r\n                {props.altCurrencyRatio && <><span> / </span><CountUp suffix=\" ₽\" separator=\",\" end={props.value * props.altCurrencyRatio} /></>} \r\n              </>\r\n            : 'Loading...'}\r\n        </h5>\r\n        <p className=\"card-text\">{!props.isLoading ? props.children : 'Loading...'}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst useStateWithLocalStorage = (localStorageKey: string): [string, React.Dispatch<React.SetStateAction<string>>] => {\r\n  const [value, setValue] = React.useState(\r\n    localStorage.getItem(localStorageKey) || ''\r\n  );\r\n \r\n  React.useEffect(() => {\r\n    localStorage.setItem(localStorageKey, value);\r\n  }, [value]);\r\n \r\n  return [value, setValue];\r\n};\r\n\r\nexport default useStateWithLocalStorage;","import { TrelloCard } from \"./types\";\r\n\r\nexport const getCards = (listId: string, apiKey: string, apiToken: string, callback: (data: TrelloCard[]) => void): Promise<any> => {\r\n  return fetch(`https://api.trello.com/1/lists/${listId}/cards?key=${apiKey}&token=${apiToken}&customFieldItems=true`)\r\n    .then(r => r.json())\r\n    .then(data => callback(data));\r\n}\r\nexport const getExchangeRate = (callback: (rate: number) => void): Promise<any> => {\r\n  return fetch('https://api.exchangeratesapi.io/latest?&base=USD&symbols=RUB')\r\n    .then(r => r.json())\r\n    .then(data => {\r\n      callback(data.rates.RUB);\r\n    });\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Card from \"./Card\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\nimport { getCards, getExchangeRate } from \"../utils\";\r\n\r\nconst getTotal = (cards: TrelloCard[]): number => {\r\n  return cards.reduce((summ, c) => summ += +c.customFieldItems[0].value.number, 0);\r\n}\r\n\r\nconst Analytics = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsCardsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [inQueueCards, setInQueueCards] = useState<TrelloCard[]>([]);\r\n  const [inProgressCards, setInProgressCards] = useState<TrelloCard[]>([]);\r\n  const [completedCards, setCompletedCards] = useState<TrelloCard[]>([]);\r\n  const [inRevisionCards, setInRevisionCards] = useState<TrelloCard[]>([]);\r\n  const [sentToClientCards, setSentToClientCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(data => setAltCurrencyRatio(data))\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    const inQueueCardsPromise = getCards(config.trelloLists.inQueueListId, apiKey, apiToken, (data) => setInQueueCards(data.filter(c => c.id !== '5f4cdb937afb6a829d4ad8f2')));\r\n    const inProgressCardsPromise = getCards(config.trelloLists.inProgressListId, apiKey, apiToken, (data) => setInProgressCards(data));\r\n    const compleatedCardsPromise = getCards(config.trelloLists.completedListId, apiKey, apiToken, (data) => setCompletedCards(data));\r\n    const inRevisionCardsPromise = getCards(config.trelloLists.inRevisionListId, apiKey, apiToken, (data) => setInRevisionCards(data));\r\n    const sentToClientCardsPromise = getCards(config.trelloLists.sentToClientListId, apiKey, apiToken, (data) => setSentToClientCards(data));\r\n\r\n    Promise.all([inQueueCardsPromise, inProgressCardsPromise, compleatedCardsPromise, inRevisionCardsPromise, sentToClientCardsPromise])\r\n      .then(() => setIsCardsLoaded(true));\r\n\r\n  }, [apiKey, apiToken]);\r\n\r\n\r\n  const inQueueTotal = getTotal(inQueueCards);\r\n  const inProgressTotal = getTotal(inProgressCards);\r\n  const completedTotal = getTotal(completedCards);\r\n  const inRevisionTotal = getTotal(inRevisionCards);\r\n  const sentToClientTotal = getTotal(sentToClientCards);\r\n\r\n  const currentCards = sentToClientCards.filter(c => !c.labels || !c.labels.length);\r\n  const currentTotal = getTotal(currentCards);\r\n\r\n  const invoicedCards = sentToClientCards.filter(c => c.labels && c.labels.some(l => l.name === config.labels.invoiced));\r\n  const invoicedTotal = getTotal(invoicedCards);\r\n\r\n  const paidCards = sentToClientCards.filter(c => c.labels && c.labels.some(l => l.name === config.labels.paid));\r\n  const paidTotal = getTotal(paidCards);\r\n\r\n  const leftToMinimumRedraw = Math.max(100 - currentTotal, 0);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col-lg\">\r\n          <Card title=\"In Queue\" value={inQueueTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {inQueueCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"In Progress\" value={inProgressTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {inProgressCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Completed\" value={completedTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {completedCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"In Revision\" value={inRevisionTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {inRevisionCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Unpaid\" value={currentTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio} badge={leftToMinimumRedraw === 0 ? 'Ready' : ''}>\r\n            <Link to={config.urls.unpaid} className=\"card-link\">{currentCards.length} drawing(s)</Link>\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Invoiced\" value={invoicedTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            <Link to={config.urls.invoiced} className=\"card-link\">{invoicedCards.length} drawing(s)</Link>\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Paid\" value={paidTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            <Link to={config.urls.paid} className=\"card-link\">{paidCards.length} drawing(s)</Link>\r\n          </Card>\r\n        </div>\r\n        <div className=\"col-lg\">\r\n          <Card title=\"Total\" value={sentToClientTotal} isLoading={!isLoaded} altCurrencyRatio={altCurrencyRatio}>\r\n            {sentToClientCards.length} drawing(s)\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Analytics;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport config from '../config.json';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-body border-bottom shadow-sm\">\r\n      <p className=\"h5 my-0 me-md-auto fw-normal\">Work Progress</p>\r\n      <nav className=\"my-2 my-md-0 me-md-3\">\r\n        <Link className=\"p-2 text-dark\" to={config.urls.home}>Analytics</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.unpaid}>Unpaid</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.invoiced}>Invoiced</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.paid}>Paid</Link>\r\n        <Link className=\"p-2 text-dark\" to={config.urls.settings}>Settings</Link>\r\n      </nav>\r\n    </header>\r\n  )\r\n};\r\n\r\nexport default Header","import config from '../config.json';\r\nimport useStateWithLocalStorage from '../hooks/useStateWithLocalStorage';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Settings = () => {\r\n  const [apiKey, setApiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const handleApiKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setApiKey(e.target.value);\r\n  }\r\n  \r\n  const [apiToken, setApiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n  const handleApiTokenChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setApiToken(e.target.value);\r\n  }\r\n\r\n  const history = useHistory();\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    history.push(config.urls.home);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Settings</h1>\r\n      <div className=\"row\" style={{maxWidth: 600}}>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"trelloApiKey\" className=\"form-label\">Trello API Key</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"trelloApiKey\" aria-describedby=\"emailHelp\" value={apiKey} onChange={handleApiKeyChange}/>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"trelloApiToken\" className=\"form-label\">Trello API Token</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"trelloApiToken\" value={apiToken} onChange={handleApiTokenChange}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;","import { TrelloCard } from \"../types\";\r\n\r\nexport interface CardsListProps {\r\n  cards: TrelloCard[];\r\n  altCurrencyRatio?: number;\r\n}\r\n\r\nconst getTotal = (cards: TrelloCard[]): number => {\r\n  return cards.reduce((summ, c) => summ += +c.customFieldItems[0].value.number, 0);\r\n}\r\n\r\nconst getFirstGroup = (string: string, regex: RegExp): string => {\r\n  const match = regex.exec(string);\r\n  return match && match[1] ? match[1].trim() : '';\r\n}\r\n\r\nconst getShortDescription = (card: TrelloCard): string => {\r\n  const orderNumber = getFirstGroup(card.desc, /Order Number:(.+)$/gm);\r\n  const orderType = getFirstGroup(card.desc, /Order Type:(.+)$/gm);\r\n\r\n  return `Order Number: ${orderNumber} (${orderType || card.name})`;\r\n}\r\n\r\nconst CardsList: React.FC<CardsListProps> = (props) => {\r\n  const currentTotal = getTotal(props.cards);\r\n\r\n  return (\r\n    <table className=\"table table-hover table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">Description</th>\r\n          <th scope=\"col\" align=\"right\" style={{ textAlign: 'right' }}>Cost (USD)</th>\r\n          <th scope=\"col\" align=\"right\" style={{ textAlign: 'right' }}>Cost (RUB)</th>\r\n          <th scope=\"col\" align=\"right\" style={{ textAlign: 'right' }}>Link</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.cards.map((c, i) =>\r\n          <tr key={c.id}>\r\n            <th scope=\"row\">{i + 1}</th>\r\n            <td>{getShortDescription(c)}</td>\r\n            <td align=\"right\">{c.customFieldItems[0].value.number}</td>\r\n            <td align=\"right\">{props.altCurrencyRatio ? `${(c.customFieldItems[0].value.number * props.altCurrencyRatio).toFixed(0)}` : 'N/A'}</td>\r\n            <td align=\"right\"><a href={c.shortUrl} className=\"link-primary\">Link</a></td>\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <th scope=\"row\">Total</th>\r\n          <td colSpan={2} align=\"right\"><b>${currentTotal}</b></td>\r\n          <td align=\"right\"><b>{props.altCurrencyRatio ? `${(currentTotal * props.altCurrencyRatio).toFixed(0)}₽` : 'N/A'}</b></td>\r\n          <td></td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  )\r\n};\r\n\r\nexport default CardsList;","import React, { useEffect, useState } from \"react\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\nimport CardsList from \"./CardsList\";\r\nimport { getCards, getExchangeRate } from \"../utils\";\r\n\r\nconst UnpaidDrawings = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [cards, setCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(data => setAltCurrencyRatio(data))\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    getCards(config.trelloLists.sentToClientListId, apiKey, apiToken, (data) => setCards(data.filter(c => !c.labels || !c.labels.length)))\r\n      .then(() => setIsLoaded(true));\r\n\r\n  }, [apiKey, apiToken]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col\">\r\n          <h3>Unpaid Orders</h3>\r\n          {\r\n            !isLoaded\r\n              ? 'Loading...'\r\n              : <CardsList cards={cards} altCurrencyRatio={altCurrencyRatio} />\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"row gy-3 \">\r\n        <div className=\"col\">\r\n          <button type=\"button\" className=\"btn btn-outline-primary\">Create an Invoice</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default UnpaidDrawings;","import React, { useEffect, useState } from \"react\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\nimport CardsList from \"./CardsList\";\r\nimport { getCards, getExchangeRate } from \"../utils\";\r\n\r\nconst InvoicedDrawings = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [cards, setCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(data => setAltCurrencyRatio(data))\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    getCards(config.trelloLists.sentToClientListId, apiKey, apiToken, (data) => setCards(data.filter(c => c.labels && c.labels.some(l => l.name === config.labels.invoiced))))\r\n      .then(() => setIsLoaded(true));\r\n\r\n  }, [apiKey, apiToken]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col\">\r\n          <h3>Invoiced Orders</h3>\r\n          {\r\n            !isLoaded\r\n              ? 'Loading...'\r\n              : <CardsList cards={cards} altCurrencyRatio={altCurrencyRatio} />\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"row gy-3 \">\r\n        <div className=\"col\">\r\n          <button type=\"button\" className=\"btn btn-outline-secondary\">Make Unpaid</button>\r\n        </div>\r\n        <div className=\"col text-end\">\r\n          <button type=\"button\" className=\"btn btn-outline-primary\">Make Paid</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default InvoicedDrawings;","import React, { useEffect, useState } from \"react\";\r\nimport useStateWithLocalStorage from \"../hooks/useStateWithLocalStorage\";\r\nimport config from '../config.json';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TrelloCard } from \"../types\";\r\nimport CardsList from \"./CardsList\";\r\nimport { getCards, getExchangeRate } from \"../utils\";\r\n\r\nconst PaidDrawings = () => {\r\n  const [apiKey] = useStateWithLocalStorage(config.localStorageKeys.trelloApiKey);\r\n  const [apiToken] = useStateWithLocalStorage(config.localStorageKeys.trelloApiToken);\r\n\r\n  const history = useHistory();\r\n  if (!apiKey || !apiToken) {\r\n    history.push(config.urls.settings);\r\n  }\r\n\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const [altCurrencyRatio, setAltCurrencyRatio] = useState<number | undefined>(undefined);\r\n  const [cards, setCards] = useState<TrelloCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(data => setAltCurrencyRatio(data))\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!apiKey || !apiToken) {\r\n      return;\r\n    }\r\n\r\n    getCards(config.trelloLists.sentToClientListId, apiKey, apiToken, (data) => setCards(data.filter(c => c.labels && c.labels.some(l => l.name === config.labels.paid))))\r\n      .then(() => setIsLoaded(true));\r\n\r\n  }, [apiKey, apiToken]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row gy-3\">\r\n        <div className=\"col\">\r\n          <h3>Paid Orders</h3>\r\n          {\r\n            !isLoaded\r\n              ? 'Loading...'\r\n              : <CardsList cards={cards} altCurrencyRatio={altCurrencyRatio} />\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PaidDrawings;","import './App.css';\r\nimport Analytics from './Analytics';\r\nimport Header from './Header';\r\nimport React from 'react';\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Settings from './Settings';\r\nimport config from '../config.json';\r\nimport UnpaidDrawings from './UnpaidDrawings';\r\nimport InvoicedDrawings from './InvoicedDrawings';\r\nimport PaidDrawings from './PaidDrawings';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path={config.urls.settings} component={Settings} />\r\n        <Route exact path={config.urls.unpaid} component={UnpaidDrawings} />\r\n        <Route exact path={config.urls.invoiced} component={InvoicedDrawings} />\r\n        <Route exact path={config.urls.paid} component={PaidDrawings} />\r\n        <Route exact path={config.urls.home} component={Analytics} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}